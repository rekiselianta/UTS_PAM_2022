{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withTiming = withTiming;\n\nvar _Easing = require(\"../Easing\");\n\nvar _util = require(\"./util\");\n\nfunction withTiming(toValue, userConfig, callback) {\n  'worklet';\n\n  return (0, _util.defineAnimation)(toValue, function () {\n    'worklet';\n\n    var config = {\n      duration: 300,\n      easing: _Easing.Easing.inOut(_Easing.Easing.quad)\n    };\n\n    if (userConfig) {\n      Object.keys(userConfig).forEach(function (key) {\n        return config[key] = userConfig[key];\n      });\n    }\n\n    function timing(animation, now) {\n      var toValue = animation.toValue,\n          startTime = animation.startTime,\n          startValue = animation.startValue;\n      var runtime = now - startTime;\n\n      if (runtime >= config.duration) {\n        animation.startTime = 0;\n        animation.current = toValue;\n        return true;\n      }\n\n      var progress = animation.easing(runtime / config.duration);\n      animation.current = startValue + (toValue - startValue) * progress;\n      return false;\n    }\n\n    function onStart(animation, value, now, previousAnimation) {\n      if (previousAnimation && previousAnimation.type === 'timing' && previousAnimation.toValue === toValue && previousAnimation.startTime) {\n        animation.startTime = previousAnimation.startTime;\n        animation.startValue = previousAnimation.startValue;\n      } else {\n        animation.startTime = now;\n        animation.startValue = value;\n      }\n\n      animation.current = value;\n\n      if (typeof config.easing === 'object') {\n        animation.easing = config.easing.factory();\n      } else {\n        animation.easing = config.easing;\n      }\n    }\n\n    return {\n      type: 'timing',\n      onFrame: timing,\n      onStart: onStart,\n      progress: 0,\n      toValue: toValue,\n      startValue: 0,\n      startTime: 0,\n      easing: function easing() {\n        return 0;\n      },\n      current: toValue,\n      callback: callback\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/animation/timing.js"],"names":["withTiming","toValue","userConfig","callback","config","duration","easing","Easing","inOut","quad","Object","keys","forEach","key","timing","animation","now","startTime","startValue","runtime","current","progress","onStart","value","previousAnimation","type","factory","onFrame"],"mappings":";;;;;AAAA;;AACA;;AACO,SAASA,UAAT,CAAoBC,OAApB,EAA6BC,UAA7B,EAAyCC,QAAzC,EAAmD;AACtD;;AACA,SAAO,2BAAgBF,OAAhB,EAAyB,YAAM;AAClC;;AACA,QAAMG,MAAM,GAAG;AACXC,MAAAA,QAAQ,EAAE,GADC;AAEXC,MAAAA,MAAM,EAAEC,eAAOC,KAAP,CAAaD,eAAOE,IAApB;AAFG,KAAf;;AAIA,QAAIP,UAAJ,EAAgB;AACZQ,MAAAA,MAAM,CAACC,IAAP,CAAYT,UAAZ,EAAwBU,OAAxB,CAAgC,UAACC,GAAD;AAAA,eAAUT,MAAM,CAACS,GAAD,CAAN,GAAcX,UAAU,CAACW,GAAD,CAAlC;AAAA,OAAhC;AACH;;AACD,aAASC,MAAT,CAAgBC,SAAhB,EAA2BC,GAA3B,EAAgC;AAC5B,UAAQf,OAAR,GAA2Cc,SAA3C,CAAQd,OAAR;AAAA,UAAiBgB,SAAjB,GAA2CF,SAA3C,CAAiBE,SAAjB;AAAA,UAA4BC,UAA5B,GAA2CH,SAA3C,CAA4BG,UAA5B;AACA,UAAMC,OAAO,GAAGH,GAAG,GAAGC,SAAtB;;AACA,UAAIE,OAAO,IAAIf,MAAM,CAACC,QAAtB,EAAgC;AAE5BU,QAAAA,SAAS,CAACE,SAAV,GAAsB,CAAtB;AACAF,QAAAA,SAAS,CAACK,OAAV,GAAoBnB,OAApB;AACA,eAAO,IAAP;AACH;;AACD,UAAMoB,QAAQ,GAAGN,SAAS,CAACT,MAAV,CAAiBa,OAAO,GAAGf,MAAM,CAACC,QAAlC,CAAjB;AACAU,MAAAA,SAAS,CAACK,OAAV,GACIF,UAAU,GAAG,CAACjB,OAAO,GAAGiB,UAAX,IAAyBG,QAD1C;AAEA,aAAO,KAAP;AACH;;AACD,aAASC,OAAT,CAAiBP,SAAjB,EAA4BQ,KAA5B,EAAmCP,GAAnC,EAAwCQ,iBAAxC,EAA2D;AACvD,UAAIA,iBAAiB,IACjBA,iBAAiB,CAACC,IAAlB,KAA2B,QAD3B,IAEAD,iBAAiB,CAACvB,OAAlB,KAA8BA,OAF9B,IAGAuB,iBAAiB,CAACP,SAHtB,EAGiC;AAI7BF,QAAAA,SAAS,CAACE,SAAV,GAAsBO,iBAAiB,CAACP,SAAxC;AACAF,QAAAA,SAAS,CAACG,UAAV,GAAuBM,iBAAiB,CAACN,UAAzC;AACH,OATD,MAUK;AACDH,QAAAA,SAAS,CAACE,SAAV,GAAsBD,GAAtB;AACAD,QAAAA,SAAS,CAACG,UAAV,GAAuBK,KAAvB;AACH;;AACDR,MAAAA,SAAS,CAACK,OAAV,GAAoBG,KAApB;;AACA,UAAI,OAAOnB,MAAM,CAACE,MAAd,KAAyB,QAA7B,EAAuC;AACnCS,QAAAA,SAAS,CAACT,MAAV,GAAmBF,MAAM,CAACE,MAAP,CAAcoB,OAAd,EAAnB;AACH,OAFD,MAGK;AACDX,QAAAA,SAAS,CAACT,MAAV,GAAmBF,MAAM,CAACE,MAA1B;AACH;AACJ;;AACD,WAAO;AACHmB,MAAAA,IAAI,EAAE,QADH;AAEHE,MAAAA,OAAO,EAAEb,MAFN;AAGHQ,MAAAA,OAAO,EAAEA,OAHN;AAIHD,MAAAA,QAAQ,EAAE,CAJP;AAKHpB,MAAAA,OAAO,EAAPA,OALG;AAMHiB,MAAAA,UAAU,EAAE,CANT;AAOHD,MAAAA,SAAS,EAAE,CAPR;AAQHX,MAAAA,MAAM,EAAE;AAAA,eAAM,CAAN;AAAA,OARL;AASHc,MAAAA,OAAO,EAAEnB,OATN;AAUHE,MAAAA,QAAQ,EAARA;AAVG,KAAP;AAYH,GA1DM,CAAP;AA2DH","sourcesContent":["import { Easing } from '../Easing';\nimport { defineAnimation } from './util';\nexport function withTiming(toValue, userConfig, callback) {\n    'worklet';\n    return defineAnimation(toValue, () => {\n        'worklet';\n        const config = {\n            duration: 300,\n            easing: Easing.inOut(Easing.quad),\n        };\n        if (userConfig) {\n            Object.keys(userConfig).forEach((key) => (config[key] = userConfig[key]));\n        }\n        function timing(animation, now) {\n            const { toValue, startTime, startValue } = animation;\n            const runtime = now - startTime;\n            if (runtime >= config.duration) {\n                // reset startTime to avoid reusing finished animation config in `start` method\n                animation.startTime = 0;\n                animation.current = toValue;\n                return true;\n            }\n            const progress = animation.easing(runtime / config.duration);\n            animation.current =\n                startValue + (toValue - startValue) * progress;\n            return false;\n        }\n        function onStart(animation, value, now, previousAnimation) {\n            if (previousAnimation &&\n                previousAnimation.type === 'timing' &&\n                previousAnimation.toValue === toValue &&\n                previousAnimation.startTime) {\n                // to maintain continuity of timing animations we check if we are starting\n                // new timing over the old one with the same parameters. If so, we want\n                // to copy animation timeline properties\n                animation.startTime = previousAnimation.startTime;\n                animation.startValue = previousAnimation.startValue;\n            }\n            else {\n                animation.startTime = now;\n                animation.startValue = value;\n            }\n            animation.current = value;\n            if (typeof config.easing === 'object') {\n                animation.easing = config.easing.factory();\n            }\n            else {\n                animation.easing = config.easing;\n            }\n        }\n        return {\n            type: 'timing',\n            onFrame: timing,\n            onStart: onStart,\n            progress: 0,\n            toValue,\n            startValue: 0,\n            startTime: 0,\n            easing: () => 0,\n            current: toValue,\n            callback,\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"script"}