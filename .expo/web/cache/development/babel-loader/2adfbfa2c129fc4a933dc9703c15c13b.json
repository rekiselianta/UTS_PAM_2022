{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTag = getTag;\nexports.measure = measure;\nexports.scrollTo = scrollTo;\nexports.setGestureState = setGestureState;\n\nvar _reactNative = require(\"react-native\");\n\nvar _PlatformChecker = require(\"./PlatformChecker\");\n\nfunction getTag(view) {\n  return (0, _reactNative.findNodeHandle)(view);\n}\n\nvar isNativeIndefined = (0, _PlatformChecker.shouldBeUseWeb)();\n\nfunction measure(animatedRef) {\n  'worklet';\n\n  if (!_WORKLET || isNativeIndefined) {\n    console.warn('[reanimated.measure] method cannot be used for web or Chrome Debugger');\n    return {\n      x: NaN,\n      y: NaN,\n      width: NaN,\n      height: NaN,\n      pageX: NaN,\n      pageY: NaN\n    };\n  }\n\n  var viewTag = animatedRef();\n\n  var result = _measure(viewTag);\n\n  if (result.x === -1234567) {\n    throw new Error(\"The view with tag \" + viewTag + \" could not be measured\");\n  }\n\n  return result;\n}\n\nfunction scrollTo(animatedRef, x, y, animated) {\n  'worklet';\n\n  if (!_WORKLET || isNativeIndefined) {\n    return;\n  }\n\n  var viewTag = animatedRef();\n\n  _scrollTo(viewTag, x, y, animated);\n}\n\nfunction setGestureState(handlerTag, newState) {\n  'worklet';\n\n  if (!_WORKLET || isNativeIndefined) {\n    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    return;\n  }\n\n  _setGestureState(handlerTag, newState);\n}","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"names":["getTag","view","isNativeIndefined","measure","animatedRef","_WORKLET","console","warn","x","NaN","y","width","height","pageX","pageY","viewTag","result","_measure","Error","scrollTo","animated","_scrollTo","setGestureState","handlerTag","newState","_setGestureState"],"mappings":";;;;;;;;AAAA;;AACA;;AACO,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACzB,SAAO,iCAAeA,IAAf,CAAP;AACH;;AACD,IAAMC,iBAAiB,GAAG,sCAA1B;;AACO,SAASC,OAAT,CAAiBC,WAAjB,EAA8B;AACjC;;AACA,MAAI,CAACC,QAAD,IAAaH,iBAAjB,EAAoC;AAChCI,IAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACA,WAAO;AACHC,MAAAA,CAAC,EAAEC,GADA;AAEHC,MAAAA,CAAC,EAAED,GAFA;AAGHE,MAAAA,KAAK,EAAEF,GAHJ;AAIHG,MAAAA,MAAM,EAAEH,GAJL;AAKHI,MAAAA,KAAK,EAAEJ,GALJ;AAMHK,MAAAA,KAAK,EAAEL;AANJ,KAAP;AAQH;;AACD,MAAMM,OAAO,GAAGX,WAAW,EAA3B;;AACA,MAAMY,MAAM,GAAGC,QAAQ,CAACF,OAAD,CAAvB;;AACA,MAAIC,MAAM,CAACR,CAAP,KAAa,CAAC,OAAlB,EAA2B;AACvB,UAAM,IAAIU,KAAJ,wBAA+BH,OAA/B,4BAAN;AACH;;AACD,SAAOC,MAAP;AACH;;AACM,SAASG,QAAT,CAAkBf,WAAlB,EAA+BI,CAA/B,EAAkCE,CAAlC,EAAqCU,QAArC,EAA+C;AAClD;;AACA,MAAI,CAACf,QAAD,IAAaH,iBAAjB,EAAoC;AAChC;AACH;;AACD,MAAMa,OAAO,GAAGX,WAAW,EAA3B;;AACAiB,EAAAA,SAAS,CAACN,OAAD,EAAUP,CAAV,EAAaE,CAAb,EAAgBU,QAAhB,CAAT;AACH;;AACM,SAASE,eAAT,CAAyBC,UAAzB,EAAqCC,QAArC,EAA+C;AAClD;;AACA,MAAI,CAACnB,QAAD,IAAaH,iBAAjB,EAAoC;AAChCI,IAAAA,OAAO,CAACC,IAAR,CAAa,uEAAb;AACA;AACH;;AACDkB,EAAAA,gBAAgB,CAACF,UAAD,EAAaC,QAAb,CAAhB;AACH","sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNativeIndefined = shouldBeUseWeb();\nexport function measure(animatedRef) {\n    'worklet';\n    if (!_WORKLET || isNativeIndefined) {\n        console.warn('[reanimated.measure] method cannot be used for web or Chrome Debugger');\n        return {\n            x: NaN,\n            y: NaN,\n            width: NaN,\n            height: NaN,\n            pageX: NaN,\n            pageY: NaN,\n        };\n    }\n    const viewTag = animatedRef();\n    const result = _measure(viewTag);\n    if (result.x === -1234567) {\n        throw new Error(`The view with tag ${viewTag} could not be measured`);\n    }\n    return result;\n}\nexport function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n    if (!_WORKLET || isNativeIndefined) {\n        return;\n    }\n    const viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || isNativeIndefined) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"]},"metadata":{},"sourceType":"script"}