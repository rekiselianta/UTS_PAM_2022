{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useAnimatedRef = useAnimatedRef;\n\nvar _react = require(\"react\");\n\nvar _NativeMethods = require(\"../NativeMethods\");\n\nvar _useSharedValue = require(\"./useSharedValue\");\n\nfunction useAnimatedRef() {\n  var tag = (0, _useSharedValue.useSharedValue)(-1);\n  var ref = (0, _react.useRef)();\n\n  if (!ref.current) {\n    var fun = function fun(component) {\n      'worklet';\n\n      if (component) {\n        tag.value = (0, _NativeMethods.getTag)(component);\n        fun.current = component;\n      }\n\n      return tag.value;\n    };\n\n    Object.defineProperty(fun, 'current', {\n      value: null,\n      writable: true,\n      enumerable: false\n    });\n    ref.current = fun;\n  }\n\n  return ref.current;\n}","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js"],"names":["useAnimatedRef","tag","ref","current","fun","component","value","Object","defineProperty","writable","enumerable"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACO,SAASA,cAAT,GAA0B;AAC7B,MAAMC,GAAG,GAAG,oCAAe,CAAC,CAAhB,CAAZ;AACA,MAAMC,GAAG,GAAG,oBAAZ;;AACA,MAAI,CAACA,GAAG,CAACC,OAAT,EAAkB;AACd,QAAMC,GAAG,GAAI,SAAPA,GAAO,CAACC,SAAD,EAAe;AACxB;;AAEA,UAAIA,SAAJ,EAAe;AACXJ,QAAAA,GAAG,CAACK,KAAJ,GAAY,2BAAOD,SAAP,CAAZ;AACAD,QAAAA,GAAG,CAACD,OAAJ,GAAcE,SAAd;AACH;;AACD,aAAOJ,GAAG,CAACK,KAAX;AACH,KARD;;AASAC,IAAAA,MAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2B,SAA3B,EAAsC;AAClCE,MAAAA,KAAK,EAAE,IAD2B;AAElCG,MAAAA,QAAQ,EAAE,IAFwB;AAGlCC,MAAAA,UAAU,EAAE;AAHsB,KAAtC;AAKAR,IAAAA,GAAG,CAACC,OAAJ,GAAcC,GAAd;AACH;;AACD,SAAOF,GAAG,CAACC,OAAX;AACH","sourcesContent":["import { useRef } from 'react';\nimport { getTag } from '../NativeMethods';\nimport { useSharedValue } from './useSharedValue';\nexport function useAnimatedRef() {\n    const tag = useSharedValue(-1);\n    const ref = useRef();\n    if (!ref.current) {\n        const fun = ((component) => {\n            'worklet';\n            // enters when ref is set by attaching to a component\n            if (component) {\n                tag.value = getTag(component);\n                fun.current = component;\n            }\n            return tag.value;\n        });\n        Object.defineProperty(fun, 'current', {\n            value: null,\n            writable: true,\n            enumerable: false,\n        });\n        ref.current = fun;\n    }\n    return ref.current;\n}\n"]},"metadata":{},"sourceType":"script"}