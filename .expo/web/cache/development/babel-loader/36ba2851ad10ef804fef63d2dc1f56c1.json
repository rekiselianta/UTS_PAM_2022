{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updatePropsJestWrapper = exports.updateProps = exports.default = exports.colorProps = exports.ColorProperties = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _jsReanimated = require(\"./js-reanimated\");\n\nvar _PlatformChecker = require(\"./PlatformChecker\");\n\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexports.colorProps = colorProps;\nvar ColorProperties = !(0, _core.isConfigured)() ? [] : (0, _core.makeShareable)(colorProps);\nexports.ColorProperties = ColorProperties;\nvar updatePropsByPlatform;\n\nif ((0, _PlatformChecker.shouldBeUseWeb)()) {\n  updatePropsByPlatform = function updatePropsByPlatform(_, updates, maybeViewRef) {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach(function (item, _) {\n        (0, _jsReanimated._updatePropsJS)(updates, item);\n      });\n    }\n  };\n} else {\n  updatePropsByPlatform = function updatePropsByPlatform(viewDescriptors, updates, _) {\n    'worklet';\n\n    for (var key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = (0, _Colors.processColor)(updates[key]);\n      }\n    }\n\n    viewDescriptors.value.forEach(function (viewDescriptor) {\n      _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n    });\n  };\n}\n\nvar updateProps = updatePropsByPlatform;\nexports.updateProps = updateProps;\n\nvar updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {\n  adapters.forEach(function (adapter) {\n    adapter(updates);\n  });\n  animatedStyle.current.value = (0, _extends2.default)((0, _extends2.default)({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexports.updatePropsJestWrapper = updatePropsJestWrapper;\nvar _default = updateProps;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","value","viewDescriptor","_updateProps","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,IAAMA,UAAU,GAAG,CACtB,iBADsB,EAEtB,mBAFsB,EAGtB,aAHsB,EAItB,iBAJsB,EAKtB,kBALsB,EAMtB,gBANsB,EAOtB,kBAPsB,EAQtB,gBARsB,EAStB,OATsB,EAUtB,aAVsB,EAWtB,qBAXsB,EAYtB,WAZsB,EAatB,iBAbsB,EActB,cAdsB,CAAnB;;AAgBA,IAAMC,eAAe,GAAG,CAAC,yBAAD,GAAkB,EAAlB,GAAuB,yBAAcD,UAAd,CAA/C;;AACP,IAAIE,qBAAJ;;AACA,IAAI,sCAAJ,EAAsB;AAClBA,EAAAA,qBAAqB,GAAG,+BAACC,CAAD,EAAIC,OAAJ,EAAaC,YAAb,EAA8B;AAClD;;AACA,QAAIA,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2B,UAACC,IAAD,EAAOL,CAAP,EAAa;AACpC,0CAAeC,OAAf,EAAwBI,IAAxB;AACH,OAFD;AAGH;AACJ,GAPD;AAQH,CATD,MAUK;AACDN,EAAAA,qBAAqB,GAAG,+BAACO,eAAD,EAAkBL,OAAlB,EAA2BD,CAA3B,EAAiC;AACrD;;AACA,SAAK,IAAMO,GAAX,IAAkBN,OAAlB,EAA2B;AACvB,UAAIH,eAAe,CAACU,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCN,QAAAA,OAAO,CAACM,GAAD,CAAP,GAAe,0BAAaN,OAAO,CAACM,GAAD,CAApB,CAAf;AACH;AACJ;;AACDD,IAAAA,eAAe,CAACG,KAAhB,CAAsBL,OAAtB,CAA8B,UAACM,cAAD,EAAoB;AAC9CC,MAAAA,YAAY,CAACD,cAAc,CAACE,GAAhB,EAAqBF,cAAc,CAACG,IAAf,IAAuB,SAA5C,EAAuDZ,OAAvD,CAAZ;AACH,KAFD;AAGH,GAVD;AAWH;;AACM,IAAMa,WAAW,GAAGf,qBAApB;;;AACA,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACT,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,EAAyCc,aAAzC,EAAwDC,QAAxD,EAAqE;AACvGA,EAAAA,QAAQ,CAACb,OAAT,CAAiB,UAACc,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACjB,OAAD,CAAP;AACH,GAFD;AAGAe,EAAAA,aAAa,CAACG,OAAd,CAAsBV,KAAtB,GAA8B,uBAAc,uBAAc,EAAd,EAAkBO,aAAa,CAACG,OAAd,CAAsBV,KAAxC,CAAd,EAA8DR,OAA9D,CAA9B;AACAa,EAAAA,WAAW,CAACR,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,CAAX;AACH,CANM;;;eAOQY,W","sourcesContent":["import { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n    updatePropsByPlatform = (_, updates, maybeViewRef) => {\n        'worklet';\n        if (maybeViewRef) {\n            maybeViewRef.items.forEach((item, _) => {\n                _updatePropsJS(updates, item);\n            });\n        }\n    };\n}\nelse {\n    updatePropsByPlatform = (viewDescriptors, updates, _) => {\n        'worklet';\n        for (const key in updates) {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        }\n        viewDescriptors.value.forEach((viewDescriptor) => {\n            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n        });\n    };\n}\nexport const updateProps = updatePropsByPlatform;\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\n    adapters.forEach((adapter) => {\n        adapter(updates);\n    });\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;\n"]},"metadata":{},"sourceType":"script"}