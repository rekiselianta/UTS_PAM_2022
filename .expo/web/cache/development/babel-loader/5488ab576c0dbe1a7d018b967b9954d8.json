{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SensorType = void 0;\nexports.useAnimatedSensor = useAnimatedSensor;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = require(\"react\");\n\nvar _core = require(\"../core\");\n\nvar _NativeReanimated = _interopRequireDefault(require(\"../NativeReanimated\"));\n\nvar SensorType;\nexports.SensorType = SensorType;\n\n(function (SensorType) {\n  SensorType[SensorType[\"ACCELEROMETER\"] = 1] = \"ACCELEROMETER\";\n  SensorType[SensorType[\"GYROSCOPE\"] = 2] = \"GYROSCOPE\";\n  SensorType[SensorType[\"GRAVITY\"] = 3] = \"GRAVITY\";\n  SensorType[SensorType[\"MAGNETIC_FIELD\"] = 4] = \"MAGNETIC_FIELD\";\n  SensorType[SensorType[\"ROTATION\"] = 5] = \"ROTATION\";\n})(SensorType || (exports.SensorType = SensorType = {}));\n\nfunction useAnimatedSensor(sensorType, userConfig) {\n  var ref = (0, _react.useRef)({\n    sensor: null,\n    unregister: function unregister() {},\n    isAvailable: false,\n    config: {\n      interval: 0\n    }\n  });\n\n  if (ref.current.sensor === null) {\n    ref.current.config = (0, _extends2.default)({\n      interval: 10\n    }, userConfig);\n    var sensorData;\n\n    if (sensorType === SensorType.ROTATION) {\n      sensorData = {\n        qw: 0,\n        qx: 0,\n        qy: 0,\n        qz: 0,\n        yaw: 0,\n        pitch: 0,\n        roll: 0\n      };\n    } else {\n      sensorData = {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n    }\n\n    ref.current.sensor = (0, _core.makeMutable)(sensorData);\n  }\n\n  (0, _react.useEffect)(function () {\n    ref.current.config = (0, _extends2.default)({\n      interval: 10\n    }, userConfig);\n\n    var id = _NativeReanimated.default.registerSensor(sensorType, ref.current.config.interval, ref.current.sensor);\n\n    if (id !== -1) {\n      ref.current.unregister = function () {\n        return _NativeReanimated.default.unregisterSensor(id);\n      };\n\n      ref.current.isAvailable = true;\n    } else {\n      ref.current.unregister = function () {};\n\n      ref.current.isAvailable = false;\n    }\n\n    return function () {\n      ref.current.unregister();\n    };\n  }, [sensorType, userConfig]);\n  return ref.current;\n}","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedSensor.js"],"names":["SensorType","useAnimatedSensor","sensorType","userConfig","ref","sensor","unregister","isAvailable","config","interval","current","sensorData","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","x","y","z","id","NativeReanimated","registerSensor","unregisterSensor"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { makeMutable } from '../core';\nimport NativeReanimated from '../NativeReanimated';\nexport var SensorType;\n(function (SensorType) {\n    SensorType[SensorType[\"ACCELEROMETER\"] = 1] = \"ACCELEROMETER\";\n    SensorType[SensorType[\"GYROSCOPE\"] = 2] = \"GYROSCOPE\";\n    SensorType[SensorType[\"GRAVITY\"] = 3] = \"GRAVITY\";\n    SensorType[SensorType[\"MAGNETIC_FIELD\"] = 4] = \"MAGNETIC_FIELD\";\n    SensorType[SensorType[\"ROTATION\"] = 5] = \"ROTATION\";\n})(SensorType || (SensorType = {}));\nexport function useAnimatedSensor(sensorType, userConfig) {\n    const ref = useRef({\n        sensor: null,\n        unregister: () => {\n            // NOOP\n        },\n        isAvailable: false,\n        config: {\n            interval: 0,\n        },\n    });\n    if (ref.current.sensor === null) {\n        ref.current.config = Object.assign({ interval: 10 }, userConfig);\n        let sensorData;\n        if (sensorType === SensorType.ROTATION) {\n            sensorData = {\n                qw: 0,\n                qx: 0,\n                qy: 0,\n                qz: 0,\n                yaw: 0,\n                pitch: 0,\n                roll: 0,\n            };\n        }\n        else {\n            sensorData = {\n                x: 0,\n                y: 0,\n                z: 0,\n            };\n        }\n        ref.current.sensor = makeMutable(sensorData);\n    }\n    useEffect(() => {\n        ref.current.config = Object.assign({ interval: 10 }, userConfig);\n        const id = NativeReanimated.registerSensor(sensorType, ref.current.config.interval, ref.current.sensor);\n        if (id !== -1) {\n            // if sensor is available\n            ref.current.unregister = () => NativeReanimated.unregisterSensor(id);\n            ref.current.isAvailable = true;\n        }\n        else {\n            // if sensor is unavailable\n            ref.current.unregister = () => {\n                // NOOP\n            };\n            ref.current.isAvailable = false;\n        }\n        return () => {\n            ref.current.unregister();\n        };\n    }, [sensorType, userConfig]);\n    return ref.current;\n}\n"]},"metadata":{},"sourceType":"script"}