{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findHandler = findHandler;\nexports.findHandlerByTestID = findHandlerByTestID;\nexports.findOldGestureHandler = findOldGestureHandler;\nexports.getNextHandlerTag = getNextHandlerTag;\nexports.handlerIDToTag = void 0;\nexports.registerHandler = registerHandler;\nexports.registerOldGestureHandler = registerOldGestureHandler;\nexports.unregisterHandler = unregisterHandler;\n\nvar _utils = require(\"../utils\");\n\nvar handlerIDToTag = {};\nexports.handlerIDToTag = handlerIDToTag;\nvar gestures = new Map();\nvar oldHandlers = new Map();\nvar testIDs = new Map();\nvar handlerTag = 1;\n\nfunction getNextHandlerTag() {\n  return handlerTag++;\n}\n\nfunction registerHandler(handlerTag, handler, testID) {\n  gestures.set(handlerTag, handler);\n\n  if ((0, _utils.isJestEnv)() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nfunction registerOldGestureHandler(handlerTag, handler) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nfunction unregisterHandler(handlerTag, testID) {\n  gestures.delete(handlerTag);\n\n  if ((0, _utils.isJestEnv)() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nfunction findHandler(handlerTag) {\n  return gestures.get(handlerTag);\n}\n\nfunction findOldGestureHandler(handlerTag) {\n  return oldHandlers.get(handlerTag);\n}\n\nfunction findHandlerByTestID(testID) {\n  var handlerTag = testIDs.get(testID);\n\n  if (handlerTag !== undefined) {\n    var _findHandler;\n\n    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;\n  }\n\n  return null;\n}","map":{"version":3,"sources":["handlersRegistry.ts"],"names":["handlerIDToTag","gestures","oldHandlers","testIDs","handlerTag","isJestEnv","findHandler"],"mappings":";;;;;;;;;;;;AAAA;;AAIO,IAAMA,cAAsC,GAA5C,EAAA;;AACP,IAAMC,QAAQ,GAAG,IAAjB,GAAiB,EAAjB;AACA,IAAMC,WAAW,GAAG,IAApB,GAAoB,EAApB;AACA,IAAMC,OAAO,GAAG,IAAhB,GAAgB,EAAhB;AAEA,IAAIC,UAAU,GAAd,CAAA;;AAEO,SAAA,iBAAA,GAAqC;AAC1C,SAAOA,UAAP,EAAA;AACD;;AAEM,SAAA,eAAA,CAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAIL;AACAH,EAAAA,QAAQ,CAARA,GAAAA,CAAAA,UAAAA,EAAAA,OAAAA;;AACA,MAAII,2BAAJ,MAAA,EAA2B;AACzBF,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,EAAAA,UAAAA;AACD;AACF;;AAEM,SAAA,yBAAA,CAAA,UAAA,EAAA,OAAA,EAGL;AACAD,EAAAA,WAAW,CAAXA,GAAAA,CAAAA,UAAAA,EAAAA,OAAAA;AACD;;AAEM,SAAA,iBAAA,CAAA,UAAA,EAAA,MAAA,EAAgE;AACrED,EAAAA,QAAQ,CAARA,MAAAA,CAAAA,UAAAA;;AACA,MAAII,2BAAJ,MAAA,EAA2B;AACzBF,IAAAA,OAAO,CAAPA,MAAAA,CAAAA,MAAAA;AACD;AACF;;AAEM,SAAA,WAAA,CAAA,UAAA,EAAyC;AAC9C,SAAOF,QAAQ,CAARA,GAAAA,CAAP,UAAOA,CAAP;AACD;;AAEM,SAAA,qBAAA,CAAA,UAAA,EAAmD;AACxD,SAAOC,WAAW,CAAXA,GAAAA,CAAP,UAAOA,CAAP;AACD;;AAEM,SAAA,mBAAA,CAAA,MAAA,EAA6C;AAClD,MAAME,UAAU,GAAGD,OAAO,CAAPA,GAAAA,CAAnB,MAAmBA,CAAnB;;AACA,MAAIC,UAAU,KAAd,SAAA,EAA8B;AAAA,QAAA,YAAA;;AAC5B,WAAA,CAAA,YAAA,GAAOE,WAAW,CAAlB,UAAkB,CAAlB,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,YAAA,GAAA,IAAA;AACD;;AACD,SAAA,IAAA;AACD","sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"script"}