{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.interpolateSharableColor = exports.interpolateColor = exports.ColorSpace = void 0;\nexports.useInterpolateConfig = useInterpolateConfig;\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _interpolation = require(\"./interpolation\");\n\nvar _derived = require(\"../reanimated1/derived\");\n\nvar _useSharedValue = require(\"./hook/useSharedValue\");\n\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  'worklet';\n\n  var h = (0, _interpolation.interpolate)(value, inputRange, colors.h, _derived.Extrapolate.CLAMP);\n  var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, _derived.Extrapolate.CLAMP);\n  var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, _derived.Extrapolate.CLAMP);\n  return (0, _Colors.hsvToColor)(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  'worklet';\n\n  var r = (0, _interpolation.interpolate)(value, inputRange, colors.r, _derived.Extrapolate.CLAMP);\n  var g = (0, _interpolation.interpolate)(value, inputRange, colors.g, _derived.Extrapolate.CLAMP);\n  var b = (0, _interpolation.interpolate)(value, inputRange, colors.b, _derived.Extrapolate.CLAMP);\n  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, _derived.Extrapolate.CLAMP);\n  return (0, _Colors.rgbaColor)(r, g, b, a);\n};\n\nvar getInterpolateRGB = function getInterpolateRGB(colors) {\n  'worklet';\n\n  var r = [];\n  var g = [];\n  var b = [];\n  var a = [];\n\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var proocessedColor = (0, _Colors.processColor)(color);\n\n    if (proocessedColor !== null && proocessedColor !== undefined) {\n      r.push((0, _Colors.red)(proocessedColor));\n      g.push((0, _Colors.green)(proocessedColor));\n      b.push((0, _Colors.blue)(proocessedColor));\n      a.push((0, _Colors.opacity)(proocessedColor));\n    }\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n};\n\nvar getInterpolateHSV = function getInterpolateHSV(colors) {\n  'worklet';\n\n  var h = [];\n  var s = [];\n  var v = [];\n\n  for (var i = 0; i < colors.length; ++i) {\n    var color = colors[i];\n    var proocessedColor = (0, _Colors.RGBtoHSV)((0, _Colors.processColor)(color));\n\n    if (proocessedColor) {\n      h.push(proocessedColor.h);\n      s.push(proocessedColor.s);\n      v.push(proocessedColor.v);\n    }\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n};\n\nvar interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n  }\n\n  throw new Error(\"Invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\n\nexports.interpolateColor = interpolateColor;\nvar ColorSpace;\nexports.ColorSpace = ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (exports.ColorSpace = ColorSpace = {}));\n\nfunction useInterpolateConfig(inputRange, outputRange) {\n  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;\n  return (0, _useSharedValue.useSharedValue)({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    colorSpace: colorSpace,\n    cache: (0, _core.makeMutable)(null)\n  });\n}\n\nvar interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {\n  'worklet';\n\n  var colors = interpolateConfig.value.cache.value;\n\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n\n    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n\n    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n  }\n\n  throw new Error(\"Invalid color space provided: \" + interpolateConfig.value.colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};\n\nexports.interpolateSharableColor = interpolateSharableColor;","map":{"version":3,"sources":["C:/Users/USER/uts/node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"],"names":["interpolateColorsHSV","value","inputRange","colors","h","Extrapolate","CLAMP","s","v","interpolateColorsRGB","r","g","b","a","getInterpolateRGB","i","length","color","proocessedColor","undefined","push","getInterpolateHSV","interpolateColor","outputRange","colorSpace","Error","ColorSpace","useInterpolateConfig","RGB","cache","interpolateSharableColor","interpolateConfig","HSV"],"mappings":"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","sourcesContent":["import { hsvToColor, RGBtoHSV, rgbaColor, processColor, red, green, blue, opacity, } from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\nimport { useSharedValue } from './hook/useSharedValue';\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n    'worklet';\n    const h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n    const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n    const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n    return hsvToColor(h, s, v);\n};\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n    'worklet';\n    const r = interpolate(value, inputRange, colors.r, Extrapolate.CLAMP);\n    const g = interpolate(value, inputRange, colors.g, Extrapolate.CLAMP);\n    const b = interpolate(value, inputRange, colors.b, Extrapolate.CLAMP);\n    const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n    return rgbaColor(r, g, b, a);\n};\nconst getInterpolateRGB = (colors) => {\n    'worklet';\n    const r = [];\n    const g = [];\n    const b = [];\n    const a = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const proocessedColor = processColor(color);\n        // explicit check in case if processedColor is 0\n        if (proocessedColor !== null && proocessedColor !== undefined) {\n            r.push(red(proocessedColor));\n            g.push(green(proocessedColor));\n            b.push(blue(proocessedColor));\n            a.push(opacity(proocessedColor));\n        }\n    }\n    return { r, g, b, a };\n};\nconst getInterpolateHSV = (colors) => {\n    'worklet';\n    const h = [];\n    const s = [];\n    const v = [];\n    for (let i = 0; i < colors.length; ++i) {\n        const color = colors[i];\n        const proocessedColor = RGBtoHSV(processColor(color));\n        if (proocessedColor) {\n            h.push(proocessedColor.h);\n            s.push(proocessedColor.s);\n            v.push(proocessedColor.v);\n        }\n    }\n    return { h, s, v };\n};\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n    'worklet';\n    if (colorSpace === 'HSV') {\n        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange));\n    }\n    else if (colorSpace === 'RGB') {\n        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange));\n    }\n    throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\nexport var ColorSpace;\n(function (ColorSpace) {\n    ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n    ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\nexport function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB) {\n    return useSharedValue({\n        inputRange,\n        outputRange,\n        colorSpace,\n        cache: makeMutable(null),\n    });\n}\nexport const interpolateSharableColor = (value, interpolateConfig) => {\n    'worklet';\n    let colors = interpolateConfig.value.cache.value;\n    if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n        if (!colors) {\n            colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors);\n    }\n    else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n        if (!colors) {\n            colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n            interpolateConfig.value.cache.value = colors;\n        }\n        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors);\n    }\n    throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};\n"]},"metadata":{},"sourceType":"script"}