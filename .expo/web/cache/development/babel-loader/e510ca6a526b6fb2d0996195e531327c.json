{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forceTouchHandlerName = exports.forceTouchGestureHandlerProps = exports.ForceTouchGestureHandler = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _utils = require(\"../utils\");\n\nvar _PlatformConstants = _interopRequireDefault(require(\"../PlatformConstants\"));\n\nvar _createHandler = _interopRequireDefault(require(\"./createHandler\"));\n\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar forceTouchGestureHandlerProps = ['minForce', 'maxForce', 'feedbackOnActivation'];\nexports.forceTouchGestureHandlerProps = forceTouchGestureHandlerProps;\n\nvar ForceTouchFallback = function (_React$Component) {\n  (0, _inherits2.default)(ForceTouchFallback, _React$Component);\n\n  var _super = _createSuper(ForceTouchFallback);\n\n  function ForceTouchFallback() {\n    (0, _classCallCheck2.default)(this, ForceTouchFallback);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(ForceTouchFallback, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.warn((0, _utils.tagMessage)('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return ForceTouchFallback;\n}(_react.default.Component);\n\n_defineProperty(ForceTouchFallback, \"forceTouchAvailable\", false);\n\nvar forceTouchHandlerName = 'ForceTouchGestureHandler';\nexports.forceTouchHandlerName = forceTouchHandlerName;\nvar ForceTouchGestureHandler = _PlatformConstants.default !== null && _PlatformConstants.default !== void 0 && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)({\n  name: forceTouchHandlerName,\n  allowedProps: [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), forceTouchGestureHandlerProps),\n  config: {}\n}) : ForceTouchFallback;\nexports.ForceTouchGestureHandler = ForceTouchGestureHandler;\nForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false;","map":{"version":3,"sources":["ForceTouchGestureHandler.ts"],"names":["forceTouchGestureHandlerProps","ForceTouchFallback","React","componentDidMount","console","tagMessage","render","forceTouchHandlerName","ForceTouchGestureHandler","createHandler","name","allowedProps","config"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,6BAA6B,GAAG,CAAA,UAAA,EAAA,UAAA,EAAtC,sBAAsC,CAAtC;;;IAMP,kB;;;;;;;;;;;;WAEEG,6BAAoB;AAClBC,MAAAA,OAAO,CAAPA,IAAAA,CACEC,uBADFD,8NACEC,CADFD;AAKD;;;WACDE,kBAAS;AACP,aAAO,KAAA,KAAA,CAAP,QAAA;AACD;;;EAX8BJ,eAAjC,S;;gBAAMD,kB,yBACyB,K;;AAsDxB,IAAMM,qBAAqB,GAA3B,0BAAA;;AAGA,IAAMC,wBAAwB,GAAG,+BAAA,IAAA,IAAA,+BAAiB,KAAjB,CAAA,IAAA,2BAAA,mBAAA,GACpCC,4BAGE;AACAC,EAAAA,IAAI,EADJ,qBAAA;AAEAC,EAAAA,YAAY,6CAAE,6CAAF,GAFZ,6BAEY,CAFZ;AAMAC,EAAAA,MAAM,EAAE;AANR,CAHFH,CADoC,GAAjC,kBAAA;;AAcND,wBAAD,CAAA,mBAACA,GACC,CAAA,+BAAA,IAAA,IAAA,+BAAiB,KAAjB,CAAA,GAAA,KAAA,CAAA,GAAA,2BAAA,mBAAA,KADF,KAACA","sourcesContent":["import React from 'react';\nimport { tagMessage } from '../utils';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\nclass ForceTouchFallback extends React.Component {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      tagMessage(\n        'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n      )\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport type ForceTouchGestureHandlerEventPayload = {\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n\n  /**\n   * The pressure of a touch.\n   */\n  force: number;\n};\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: forceTouchHandlerName,\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"]},"metadata":{},"sourceType":"script"}