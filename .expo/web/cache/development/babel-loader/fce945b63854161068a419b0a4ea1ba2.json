{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\n\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\n\nvar _State = require(\"../../State\");\n\nvar _utils = require(\"../../utils\");\n\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (_reanimatedWrapper.Reanimated) {\n          _reanimatedWrapper.Reanimated.setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","tagMessage","GestureStateManager","create","begin","Reanimated","State","console","activate","fail","end"],"mappings":";;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAGC,uBAAvB,kFAAuBA,CAAvB;AAIO,IAAMC,mBAAmB,GAAG;AACjCC,EAAAA,MADiC,kBAC3B,UAD2B,EACmB;AAClD;;AACA,WAAO;AACLC,MAAAA,KAAK,EAAE,iBAAM;AACX;;AACA,YAAA,6BAAA,EAAgB;AACdC,wCAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,KAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAPE,OAAA;AAULC,MAAAA,QAAQ,EAAE,oBAAM;AACd;;AACA,YAAA,6BAAA,EAAgB;AACdH,wCAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,MAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAhBE,OAAA;AAmBLE,MAAAA,IAAI,EAAE,gBAAM;AACV;;AACA,YAAA,6BAAA,EAAgB;AACdJ,wCAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,MAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AAzBE,OAAA;AA4BLG,MAAAA,GAAG,EAAE,eAAM;AACT;;AACA,YAAA,6BAAA,EAAgB;AACdL,wCAAAA,eAAAA,CAAAA,UAAAA,EAAuCC,aAAvCD,GAAAA;AADF,SAAA,MAEO;AACLE,UAAAA,OAAO,CAAPA,IAAAA,CAAAA,cAAAA;AACD;AACF;AAnCI,KAAP;AAqCD;AAxCgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}